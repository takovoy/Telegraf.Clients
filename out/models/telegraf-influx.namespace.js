'use strict';Object.defineProperty(exports,'__esModule',{value:true});const telegraf_formatters_namespace_1=require('./telegraf-formatters.namespace');var Influx;(function(Influx){class InfluxPoint{constructor(measurement,fields,tags=null,utcTimestamp=null){this.measurement=measurement;this.fields=fields;this.tags=tags;this.utcTimestamp=utcTimestamp;if(!measurement){throw new Error(`Invalid argument "measurement"`);}if(!fields){throw new Error(`Invalid argument "fields"`);}if(!tags){throw new Error(`Invalid argument "tags"`);}}format(){return this.toString();}toString(){return InfluxPointSerializer.serialize(this);}}class InfluxPointSerializer{static serialize(point){const tags=point.tags;const fields=point.fields;const allTags=telegraf_formatters_namespace_1.Formatters.TagsFormatter.format(tags).join(',');const allFields=telegraf_formatters_namespace_1.Formatters.FieldFormatter.format(fields).join(',');const tagsPart=allTags.length>0?`,${allTags}`:allTags;const measurement=telegraf_formatters_namespace_1.Formatters.KeyFormatter.format(point.measurement);return`${measurement}${tagsPart} ${allFields} ${telegraf_formatters_namespace_1.Formatters.FieldValueFormatter.formatDate(point.utcTimestamp)}`.trim();}}class InfluxClient{constructor(channel,tags={}){this.channel=channel;this.tags=tags;if(!channel){throw new Error(`Argument "channel" is empty`);}}send(measurement,fields,tags,timestamp=null){return this.publish(new InfluxPoint(measurement,fields,this.assignTags(tags),timestamp));}publish(point){return this.channel.write(point.format());}assignTags(tags){return Object.assign(this.tags,tags||{});}}Influx.InfluxClient=InfluxClient;}(Influx=exports.Influx||(exports.Influx={})));