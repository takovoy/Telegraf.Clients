'use strict';Object.defineProperty(exports,'__esModule',{value:true});const telegraf_formatters_namespace_1=require('./telegraf-formatters.namespace');var Statsd;(function(Statsd){var TagsFormatter=telegraf_formatters_namespace_1.Formatters.TagsFormatter;var KeyFormatter=telegraf_formatters_namespace_1.Formatters.KeyFormatter;let MetricType;(function(MetricType){MetricType[MetricType['Undefined']=0]='Undefined';MetricType[MetricType['Counter']=1]='Counter';MetricType[MetricType['Gauge']=2]='Gauge';MetricType[MetricType['Time']=3]='Time';MetricType[MetricType['Set']=4]='Set';}(MetricType||(MetricType={})));class MetricValue{toString(){throw new Error('Method toString is not implemented');}}class NumberMetricValue extends MetricValue{constructor(value,explicitlySigned=false){super();this.value=value;this.explicitlySigned=explicitlySigned;}toString(){return Math.abs(this.value)<1e-8?'0':this.value.toString();}}class StringMetricValue extends MetricValue{constructor(value){super();this.value=value;}toString(){return this.value;}}class Metric{constructor(name,type,value,sample,tags={}){this.name=name;this.type=type;this.value=value;this.sample=sample;this.tags=tags;}static counter(name,value,sample=1,tags=null){return new Metric(name,MetricType.Counter,new NumberMetricValue(value),sample,tags);}static gauge(name,value,sample=1,tags=null){return new Metric(name,MetricType.Gauge,new NumberMetricValue(value),sample,tags);}static time(name,value,sample=1,tags=null){return new Metric(name,MetricType.Time,new NumberMetricValue(value),sample,tags);}static set(name,value,sample=1,tags=null){return new Metric(name,MetricType.Set,new StringMetricValue(value),sample,tags);}}class MeasurementBuilder{static buildMeasurement(...names){const metricName=names.filter(name=>name&&name.trim()).map(name=>this.sanitizeMeasurement(name.replace(/^\.*(.*)\.*$/,'$1'))).join('.');return KeyFormatter.format(metricName);}static sanitizeMeasurement(metric){return metric.replace(this.reservedCharactersRegex,'_');}}MeasurementBuilder.reservedCharactersRegex=/[/\\?%*:|"<>@\n\r\t]/g;class MetricSerializer{static serializeMetric(metric){const value=this.formattedMetricValue(metric.type,metric.value,metric.sample);const measurement=MeasurementBuilder.buildMeasurement(metric.name);const tags=metric.tags;const tagsValue=tags==null?null:TagsFormatter.format(tags).join(',');return tagsValue&&tagsValue.trim()?`${measurement},${tagsValue}:${value}`:`${measurement}:${value}`;}static formattedMetricValue(type,metricValue,sample){if(sample<0||sample>1){throw new Error('Argument out of range');}const metricTypeSpecifier=MetricSerializer.getMetricTypeSpecifier(type);const value=metricValue.toString();if(!metricTypeSpecifier||!metricTypeSpecifier.trim()){throw new Error(`Argument "metricTypeSpecifier" is invalid`);}return sample<1?`|@${sample}`:`${value}|${metricTypeSpecifier}`;}static getMetricTypeSpecifier(metricType){switch(metricType){case MetricType.Counter:return'c';case MetricType.Gauge:return'g';case MetricType.Time:return'ms';case MetricType.Set:return's';default:throw new Error('Argument out of range');}}}class StatsdClient{constructor(channel,tags={}){this.channel=channel;this.tags=tags;if(!channel){throw new Error(`Argument "channel" is empty`);}}counter(...args){const sample=args.length===3&&1||args[2]||1;const tags=this.assignTags(args[args.length-1]);this.publish(Metric.counter(args[0],args[1],sample,tags));}gauge(...args){const sample=args.length===3&&1||args[2]||1;const tags=this.assignTags(args[args.length-1]);this.publish(Metric.gauge(args[0],args[1],sample,tags));}time(...args){const sample=args.length===3&&1||args[2]||1;const tags=this.assignTags(args[args.length-1]);this.publish(Metric.time(args[0],args[1],sample,tags));}set(...args){const sample=args.length===3&&1||args[2]||1;const tags=this.assignTags(args[args.length-1]);this.publish(Metric.set(args[0],args[1],sample,tags));}publish(metric){if(metric.sample<1&&metric.sample<Math.random()){return;}this.channel.write(MetricSerializer.serializeMetric(metric));}assignTags(tags){return Object.assign(this.tags,tags||{});}}Statsd.StatsdClient=StatsdClient;}(Statsd=exports.Statsd||(exports.Statsd={})));